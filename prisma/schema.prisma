// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
  id String @id @default(uuid())
  email String @unique
  first_name String
  last_name String
  phone String
  password String
  role String?
  gym Gym[]

  @@map("users")
}

model Gym {
  id String @id @default(uuid())
  name String
  street_1 String
  street_2 String
  city String
  state String
  zip String
  client_size String
  training_staff_size String
  created_at DateTime @default(now())
  updated_at DateTime?
  locations Location[]
  users User[]
  clients Client[]
  trainers Trainer[]
  sessions Session[]

  @@map("gyms")
}


model Location {
  id String @id @default(uuid())
  name String
  street_1 String
  street_2 String
  city String
  state String
  zip String
  client_size String
  specialty String
  created_at DateTime @default(now())
  updated_at DateTime?
  gym Gym @relation(fields: [gymId], references: [id])
  gymId String

  @@map("locations")
}

//We might need to add an identifier for client and sender
model Message {
  id String @id @default(uuid())
  uuid String? @unique
  sender String?
  to String
  from String
  body String
  direction String?
  media_uri String?
  twilio_sid String?
  status String?
  created_at DateTime @default(now())
  updated_at DateTime?

  @@map("messages")
}

model Client {
  id String @id @default(uuid())
  email String @unique
  first_name String
  last_name String
  street_1 String
  street_2 String?
  city String
  state String
  zip String
  phone1 String
  phone2 String?
  contact_preference String
  created_at DateTime @default(now())
  updated_at DateTime?
  gyms Gym[]
  trainers Trainer[]

  @@map("clients")
}

model Trainer {
  id String @id @default(uuid())
  email String @unique
  first_name String
  last_name String
  street_1 String
  street_2 String?
  city String
  state String
  zip String
  phone1 String
  phone2 String?
  specialty String
  created_at DateTime @default(now())
  updated_at DateTime?
  gym Gym[]
  clients Client[]
  sessions Session[]

  @@map("trainers")
}

model Session {
  id String @id @default(uuid())
  start_time DateTime
  end_time DateTime
  type String
  title String
  Description String?

  gym Gym @relation(fields:[gymId], references:[id])
  gymId String
  trainer Trainer @relation(fields:[trainerId], references:[id])
  trainerId String
  created_at DateTime @default(now())
  updated_at DateTime?

  @@map("sessions")
}
